"""init db

Revision ID: a14ea8ec0302
Revises: 
Create Date: 2025-08-07 23:06:32.211896

"""
from typing import Sequence, Union
from sqlalchemy.dialects import postgresql
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a14ea8ec0302'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    book_condition = postgresql.ENUM(
        'NEW', 
        'LIKE_NEW', 
        'VERY_GOOD', 
        'GOOD', 
        'FAIR', 
        'WORN', 
        'DAMAGED', 
        'UNUSABLE',
        name='bookcondition'
    )
    book_condition.create(op.get_bind()) 

    account_type = postgresql.ENUM(
        'ADMIN', 
        'LIBRARIAN', 
        'BORROWER',
        name='accounttype'
    )
    account_type.create(op.get_bind()) 

    op.create_table('book',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('author', sa.String(), nullable=False),
    sa.Column('condition', book_condition, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_account',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False, unique=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('account_type', account_type, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('book_transaction',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.TIMESTAMP(timezone=True), server_default=sa.func.now(), nullable=False),
    sa.Column('due', sa.DateTime(), nullable=False),
    sa.Column('returned', sa.Boolean(), server_default='False', nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fine',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=2), nullable=False),
    sa.Column('date', sa.TIMESTAMP(timezone=True), server_default=sa.func.now(), nullable=False),
    sa.Column('paid', sa.Boolean(), server_default='False', nullable=False),
    sa.ForeignKeyConstraint(['transaction_id'], ['book_transaction.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('fine')
    op.drop_table('book_transaction')
    op.drop_table('user_account')
    op.drop_table('book')

    book_condition = postgresql.ENUM(
        'NEW', 
        'LIKE_NEW', 
        'VERY_GOOD', 
        'GOOD', 
        'FAIR', 
        'WORN', 
        'DAMAGED', 
        'UNUSABLE',
        name='bookcondition'
    )
    book_condition.drop(op.get_bind()) 

    account_type = postgresql.ENUM(
        'ADMIN', 
        'LIBRARIAN', 
        'BORROWER',
        name='accounttype'
    )
    account_type.drop(op.get_bind()) 
    # ### end Alembic commands ###
